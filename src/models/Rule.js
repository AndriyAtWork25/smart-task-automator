// src/models/Rule.js
const mongoose = require('mongoose');

const ruleSchema = new mongoose.Schema(
  {
    // –¥–æ –∫–æ–≥–æ –Ω–∞–ª–µ–∂–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },

    // –Ω–∞–∑–≤–∞ –ø—Ä–∞–≤–∏–ª–∞
    name: { type: String, required: true },

    // –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
    description: { type: String },

    // üîπ —Ç–∏–ø —Ç—Ä–∏–≥–µ—Ä–∞: —Ç–µ–ø–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î 'time', 'event', 'webhook'
    triggerType: {
      type: String,
      enum: ['time', 'event', 'webhook'],
      default: 'time',
      required: true
    },

    // –¥–æ–¥–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç—Ä–∏–≥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∞–±–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ)
    triggerValue: { type: String, default: '' },

    // üîπ —Ç–∏–ø –¥—ñ—ó: —Ç–µ–ø–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î 'log', 'telegram', 'http_request'
    actionType: {
      type: String,
      enum: ['log', 'telegram', 'http_request'],
      default: 'log',
      required: true
    },

    // –∫–æ–Ω—Ñ—ñ–≥ –æ–±‚Äô—î–∫—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, { url, method })
    actionConfig: { type: Object, default: {} },

    // —á–∏ –∞–∫—Ç–∏–≤–Ω–µ –ø—Ä–∞–≤–∏–ª–æ
    isActive: { type: Boolean, default: true }
  },
  { timestamps: true }
);

module.exports = mongoose.model('Rule', ruleSchema);
