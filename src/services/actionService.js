// src/services/actionService.js
async function executeActionForRule(rule, event) {
  try {
    // üîπ 1. –õ–æ–≥—É–≤–∞–Ω–Ω—è (—ñ—Å–Ω—É—é—á–µ)
    if (rule.actionType === 'log') {
      return {
        ok: true,
        message: `Logged event ${event.eventId} for rule ${rule._id}`
      };
    }

    // üîπ 2. –¢–µ–ª–µ–≥—Ä–∞–º (mock)
    if (rule.actionType === 'telegram') {
      const chatId = rule.actionConfig?.chatId || 'unknown_chat';
      return {
        ok: true,
        message: `(mock) Sent telegram to ${chatId}`
      };
    }

    // üîπ 3. HTTP-–∑–∞–ø–∏—Ç (—Ä–µ–∞–ª—å–Ω–∞ –¥—ñ—è)
    if (rule.actionType === 'http_request') {
      const url = rule.actionConfig?.url;
      const method = rule.actionConfig?.method || 'GET';
      const body = rule.actionConfig?.body || {};

      if (!url) {
        return { ok: false, message: 'Missing URL in actionConfig' };
      }

      const options = {
        method,
        headers: { 'Content-Type': 'application/json' }
      };

      if (method.toUpperCase() === 'POST') {
        options.body = JSON.stringify(body);
      }

      const response = await fetch(url, options);
      const text = await response.text();

      return {
        ok: response.ok,
        message: `HTTP ${method} to ${url} ‚Üí ${response.status} ${response.statusText}`,
        detail: text.slice(0, 300) // –º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª—ñ–≤, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ –ª–æ–≥–∏
      };
    }

    // –Ø–∫—â–æ —Ç–∏–ø –Ω–µ –≤—ñ–¥–æ–º–∏–π
    return { ok: false, message: `Unknown action type: ${rule.actionType}` };

  } catch (err) {
    console.error('‚ùå Action execution failed:', err);
    return { ok: false, message: err.message };
  }
}

module.exports = { executeActionForRule };
